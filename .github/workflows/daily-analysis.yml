name: Shuangseqiu Data and Analysis

on:
  schedule:
    # UTC时间周日、周二、周四的 22:00，对应北京时间周一、周三、周五的 6:00
    - cron: '0 22 * * 0,2,4'
  workflow_dispatch:

jobs:
  daily_process:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai # Set timezone for consistent date/time operations

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Updated to v4
      with:
        fetch-depth: 0 # Fetch all history for git operations

    - name: Set up Python 3.9
      uses: actions/setup-python@v5 # Updated to v5
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v4 # Updated to v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run data acquisition script
      run: python ssq_data_processor.py

    - name: Run bonus calculation script
      run: python ssq_bonus_calculation.py
      
    - name: Run analysis script
      run: python ssq_analyzer.py

    - name: Create fixed filename copy of latest analysis report
      run: |
        set -e # Exit immediately if a command exits with a non-zero status
        # Find the latest report by lexical sort (assuming YYYYMMDD in filename)
        # If filenames are like ssq_analysis_output_YYYYMMDD_HHMMSS.txt, sort -r works.
        # For true latest by modification time, use `ls -1t` if find doesn't sort by time.
        # However, the original `sort -r` on `ls` output works if filenames are sortable.
        # Using find and then sort for robustness with filenames:
        latest_report_file=$(find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort -r | head -n 1)
        
        if [ -n "$latest_report_file" ] && [ -f "$latest_report_file" ]; then
          cp "$latest_report_file" "latest_ssq_analysis.txt"
          echo "Created fixed filename copy: latest_ssq_analysis.txt from $latest_report_file"
        else
          echo "No ssq_analysis_output_*.txt files found, or latest_report_file variable is empty. Skipping copy."
        fi

    - name: Clean old reports - keep only latest 3
      run: |
        set -e # Exit immediately if a command exits with a non-zero status
        echo "--- Cleaning old analysis reports ---"
        
        # Store sorted list of reports (oldest first based on filename)
        mapfile -t reports < <(find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort)
        
        count=${#reports[@]}
        keep=3 # Number of reports to keep
        
        echo "Found $count reports. Configured to keep $keep latest."
        
        if [ "$count" -gt "$keep" ]; then
          num_to_delete=$((count - keep))
          echo "Deleting $num_to_delete oldest reports:"
          for i in $(seq 0 $((num_to_delete - 1))); do
            report_to_delete="${reports[$i]}"
            if [ -f "$report_to_delete" ]; then # Double check file exists
              echo "Removing: $report_to_delete"
              rm "$report_to_delete"
            else
              echo "Skipping (not found): $report_to_delete" # Should not happen with mapfile from find
            fi
          done
        else
          echo "No cleanup needed. $count report(s) found (≤ $keep)."
        fi
        
        echo "Listing remaining analysis reports:"
        find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' | sort
        echo "--- Finished cleaning reports ---"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit updated files
      run: |
        set -e
        echo "--- Staging and Committing Files ---"
        
        # Stage deletions and modifications of already tracked files
        git add -u
        
        # Add specific generated/updated files.
        # Use an array to list files for easier management.
        # These files are expected to be created or modified by the scripts.
        files_to_commit=(
          "shuangseqiu.csv"
          "latest_ssq_analysis.txt"
          "latest_ssq_calculation.txt" # Assuming ssq_bonus_calculation.py creates/updates this
          "weights_config.json"        # Assuming one of the scripts creates/updates this
        )
        
        for file_path in "${files_to_commit[@]}"; do
          if [ -f "$file_path" ]; then
            git add "$file_path"
            echo "Staged: $file_path"
          else
            echo "Skipping (not found): $file_path"
          fi
        done
        
        # Add all newly created analysis log files (if any)
        # The -r flag for xargs ensures 'git add' doesn't run if find returns no files.
        find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 -r git add
        echo "Staged any new ssq_analysis_output_*.txt files."

        echo "Current git status:"
        git status --porcelain
        
        # Commit if there are any staged changes
        # The `|| true` handles the case where there are no changes, preventing workflow failure.
        # A more explicit check:
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Auto update: Data and Analysis results $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Changes committed."
        fi
        echo "--- Finished Staging and Committing ---"

    - name: Push changes
      uses: ad-m/github-push-action@v0.8.0 # Updated to a tagged version (check for latest)
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }} # Pushes to the same branch that triggered the workflow
